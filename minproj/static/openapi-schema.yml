openapi: 3.0.2
info:
  title: 'MinProj'
  version: ''

paths:
  /auth/signin/:
    post:
      operationId: Login
      summary: Auth by username and password
      description: |
        ### Авторизация пользователей. В ответе указывается токен и роль пользователя "staff", в зависимости от которой должен быть редирект в ЛК пользователя
        ## При авторизации обновляется поле last_login пользователя
        ## Время жизни токена - 30 дней. При окончании срока действия или при отсутствии токена генерируется новый
      parameters: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - login

  /coordinators/signup/:
    post:
      summary: Registration Coordinator
      operationId: RegistrationCoordinator
      description: |
        ### Регистрация Координатора. При успешной регистрации Администратору в ЛК и на почту должно отправляться уведомление.
        ### Авторизация возможна только после подтверждения Администратором. 
        ### Обязательные поля: "username", "password", "name", "surname", "phone", "email" 
        ### Уникальные поля: "username", "phone"
        ### Проверка на валидацию: "phone", "email"
        # TODO: Добавление "photo" нужно реализовать
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCoordinatorAndRecipient'
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - registration

  /recipients/signup/:
    post:
      operationId: RegistrationRecipient
      summary: Registration Recipient
      description: |
        ### Регистрация Получателя. При успешной регистрации Координаторам в ЛК и на почту должно отправляться уведомление.
        ### Авторизация возможна только после подтверждения одним из Координаторов. 
        ### Обязательные поля: "username", "password", "name", "surname", "phone" 
        ### Уникальные поля: "username", "phone"
        ### Проверка на валидацию: "phone", "email"
        # TODO: Добавление "photo" нужно реализовать
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCoordinatorAndRecipient'
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - registration

  /operators/signup/:
    post:
      operationId: RegistrationOperator
      summary: Registration Operator
      description: |
        ### Регистрация Оператора. При успешной регистрации Администратору в ЛК и на почту должно отправляться уведомление.
        ### Авторизация возможна только после подтверждения Администратором. 
        ### Обязательные поля: "username", "password", "name", "surname", "phone", "email", "department_id_id" 
        ### Уникальные поля: "username", "phone"
        ### Проверка на валидацию: "phone", "email"
        # TODO: Добавление "photo" нужно реализовать
        # TODO: В поле "department_id_id" сейчас вводится id ведомства. Надо будет сделать выпадающий список ведомств из БД
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationOperator'
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - registration

  /whoami/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a user by token
      operationId: WhoAmI
      parameters: [ ]
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - whoami

  /users/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a user's list by token
      operationId: Users
      description: |
        # Список пользователей в зависимости от роли пользователя (определяется по токену):
        ## Админ - абсолютно все пользователи
        ## Координаторы(валидные и активные) - активные и валидные координаторы, активные и валидные операторы, все получатели
        ## Операторы(валидные и активные) - активные и валидные координаторы, активные и валидные операторы, активные и валидные получатели
        ## Получатели - активные и валидные координаторы
      parameters: [ ]
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users
    post:
      security:
        - bearerAuth: [ ]
      operationId: CreateUser
      summary: Create User by Administrator
      description: |
        ### Создание пользователя
        ### Доступ только у Администратора. 
        ### Обязательные поля: "username", "password", "name", "surname", "phone", "staff", "is_superuser", "is_check", "is_active" 
        ### Уникальные поля: "username", "phone"
        ### Проверка на валидацию: "phone", "email"
        # TODO: Добавление "photo" нужно реализовать
        # TODO: Выбор роли пользователя из списка
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users

  /users/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a user by id
      operationId: GetUser
      description: |
        # Получение профиля пользователя:
        ## Админ - абсолютно все пользователи
        ## Координаторы(валидные и активные) - активные и валидные координаторы, активные и валидные операторы, все получатели
        ## Операторы(валидные и активные) - активные и валидные координаторы, активные и валидные операторы, активные и валидные получатели
        ## Получатели - активные и валидные координаторы
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users
    patch:
      security:
        - bearerAuth: [ ]
      summary: Update a user by id
      operationId: UpdateUser
      description: |
        # Редактирование профиля пользователя:
        ## Админ - редактирование всех полей любого пользователя
        ## Координаторы(валидные и активные) - редактирование собственного профиля, кроме staff, is_check (только Администраторы)
        ## Операторы(валидные и активные) - редактирование собственного профиля, кроме staff, is_check (только Администраторы)
        ## Получатели(валидные и активные) - редактирование собственного профиля, кроме staff (админ), is_check (только Координаторы и Администраторы)
        ## В request body перечислены все поля (ненужные удалить)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserAdmin'
            required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users
    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a user by id
      operationId: DeleteUser
      description: |
        # Удаление пользователя:
        ## Админ - удаляет любого пользователя из БД
        ## Координаторы, Операторы, Получатели - удаляют только собственный доступ к сервису (меняют статус is_active = False). Восстановить может только Администратор
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users

  /departments/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a department's list by token
      operationId: Departments
      description: |
        # Список всех ведомств. Могут смотреть все активные и валидные пользователи
      parameters: [ ]
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments
    post:
      security:
        - bearerAuth: [ ]
      operationId: CreateDepartment
      summary: Create Department by Administrator
      description: |
        ### Создание ведомства
        ### Доступ только у Администратора.
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Министерство здравоохранения
            required: true
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments

  /departments/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a Department by id
      operationId: GetDepartment
      description: |
        # Получение ведомства. Могут смотреть все активные и валидные пользователи
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments

    patch:
      security:
        - bearerAuth: [ ]
      summary: Update a Department by id
      operationId: UpdateDepartment
      description: |
        # Редактирование ведомства:
        # Доступ только у Администратора.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Министерство здравоохранения
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments

    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a Department by id
      operationId: DeleteUser
      description: |
        # Удаление ведомства из БД:
        # Доступ только у Администратора.
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments

  /departments/{id}/locations/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a department's locations by token
      operationId: DepartmentLocations
      description: |
        # Список всех учреждений ведомства:
        ## Администраторы - все учреждения ведомства
        ## Операторы (активные и валидные) - все учреждения (если оператор связан с ведомством) или активные учреждения (если оператор не связан с ведомством)
        ## Координаторы и получатели (активные и валидные) - активные учреждения ведомства
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments

  /locations/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a location's list by token
      operationId: Locations
      description: |
        # Список всех учреждений. 
        ## Администраторы - все учреждения
        ## Операторы (активные и валидные) - все учреждения, кроме неактивных учреждений других ведомств
        ## Координаторы и получатели (активные и валидные) - активные учреждения
      parameters: [ ]
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations
    post:
      security:
        - bearerAuth: [ ]
      operationId: CreateLocation
      summary: Create Location
      description: |
        ### Создание учреждения
        ### Доступ только у Администратора и Операторов (ведомство Оператора = ведомству учреждения).
        ### Обязательные поля: "name", "address", "phone", "department_id" (это поле только для Админа, для Оператора оно будет игнорироваться)
        ### Уникальные поля: "name", "phone"
        ### Проверка на валидацию: "phone"
        # TODO: Добавление "photo" нужно реализовать, реализация координат локации
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocation'
            required: true
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations

  /locations/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a Location by id
      operationId: GetLocation
      description: |
        # Получение учреждения
        ## Администраторы - любое учреждение
        ## Операторы (активные и валидные) - любое учреждение, кроме неактивных учреждений других ведомств
        ## Координаторы и получатели (активные и валидные) - активное учреждение

      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations

    patch:
      security:
        - bearerAuth: [ ]
      summary: Update a Location by id
      operationId: UpdateLocation
      description: |
        # Редактирование ведомства:
        ## Доступ только у Администратора и Операторов (ведомство Оператора = ведомству учреждения).
        ## Поля is_active и department_id редактировать могут только Админы
        ### Ненужные поля удалить
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchLocation'
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations

    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a Location by id
      operationId: DeleteLocation
      description: |
        # Удаление учреждения:
        ## Админ - удаляет любое учреждение из БД
        ## Операторы - делают учреждение неактивным (меняют статус is_active = False). Доступ только к учреждениям собственного ведомства. Восстановить может только Администратор
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Login:
      type: object
      properties:
        user:
          type: object
          properties:
            username:
              type: string
              example: admin
            password:
              type: string
              example: admin
    RegistrationCoordinatorAndRecipient:
      type: object
      properties:
        user:
          type: object
          properties:
            username:
              type: string
              example: test1
            password:
              type: string
              example: Maksoft2023
            name:
              type: string
              example: testname
            surname:
              type: string
              example: testsurname
            middle_name:
              type: string
              example: testmiddlename
            phone:
              type: string
              example: +79271112233
            email:
              type: string
              example: test@test.test
    #            photo:
    #              type: string
    #              example: ""
    RegistrationOperator:
      type: object
      properties:
        user:
          type: object
          properties:
            username:
              type: string
              example: test1
            password:
              type: string
              example: Maksoft2023
            name:
              type: string
              example: testname
            surname:
              type: string
              example: testsurname
            middle_name:
              type: string
              example: testmiddlename
            phone:
              type: string
              example: +79271112233
            email:
              type: string
              example: test@test.test
            #            photo:
            #              type: string
            #              example: ""
            department_id_id:
              type: integer
              example: 2
    CreateUser:
      type: object
      properties:
        username:
          type: string
          example: testusername
        password:
          type: string
          example: Maksoft2023
        name:
          type: string
          example: testname
        surname:
          type: string
          example: testsurname
        middle_name:
          type: string
          example:
        staff:
          type: string
          example: CO
        phone:
          type: string
          example: +79275555555
        email:
          type: string
          example: test@test.test
        #            photo:
        #              type: string
        #              example: ""
        department_id_id:
          type: integer
          example:
        is_superuser:
          type: boolean
          example: False
        is_active:
          type: boolean
          example: True
        is_check:
          type: boolean
          example: True
    PatchUserAdmin:
      type: object
      properties:
        username:
          type: string
          example:
        password:
          type: string
          example:
        name:
          type: string
          example:
        surname:
          type: string
          example:
        middle_name:
          type: string
          example:
        staff:
          type: string
          example:
        phone:
          type: string
          example:
        email:
          type: string
          example:
        #            photo:
        #              type: string
        #              example: ""
        department_id:
          type: integer
          example:
        is_superuser:
          type: boolean
          example:
        is_active:
          type: boolean
          example:
        is_check:
          type: boolean
          example:
    CreateLocation:
      type: object
      properties:
        name:
          type: string
          example: test1
        address:
          type: string
          example: Penza
        lat:
          type: number
          example: 53.178386
        lon:
          type: number
          example: 45.008664
        phone:
          type: string
          example: +79271112233
        email:
          type: string
          example: test@test.test
        department_id:
          type: string
          example: 1
    #            photo:
    #              type: string
    #              example: ""
    PatchLocation:
      type: object
      properties:
        name:
          type: string
          example: test1
        address:
          type: string
          example: Penza
        lat:
          type: number
          example: 53.178386
        lon:
          type: number
          example: 45.008664
        phone:
          type: string
          example: +79271112233
        email:
          type: string
          example: test@test.test
        department_id:
          type: string
          example: 1
        is_active:
          type: boolean
          example: true
    #            photo:
    #              type: string
    #              example: ""

