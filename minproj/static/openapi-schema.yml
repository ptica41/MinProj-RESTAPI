openapi: 3.0.2
info:
  title: 'MinProj'
  version: ''

paths:
  /auth/signin/:
    post:
      operationId: Login
      summary: Auth by phone and password
      description: |
        # Авторизация пользователей
        ## В ответе указывается токен и роль пользователя "staff", в зависимости от которой должен быть редирект в ЛК пользователя
        ## Время жизни токена - 30 дней. При окончании срока действия или при отсутствии токена генерируется новый
      parameters: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - login

  /password-reset/:
    post:
      operationId: PasswordReset
      summary: Reset password
      description: |
        # Все пользователи
        ## Возвращает staff (роль юзера), user_id и key для сброса пароля по номеру телефона, если в БД есть пользователь с данным номером телефона
        ## Время жизни key 7 дней
      parameters: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  phone:
                    type: string
                    example: "+79275555555"
                    required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - reset password

  /password-reset/confirm/:
    post:
      operationId: PasswordResetConfirm
      summary: Confirm reset password
      description: |
        # Все пользователи
        # Смена пароля по значению key
      parameters: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "Maksoft2023"
                token:
                  type: string
                  example: "25d92626590a9e088fb4f"
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - reset password

  /password-reset/list/:
    get:
      security:
        - bearerAuth: [ ]
      operationId: PasswordResetList
      summary: Request's list to reset password
      description: |
        # Список запросов на смену пароля
        ## Администратор - запросы от Координаторов и Операторов
        ## Координаторы (валидные и активные) - запросы от Получателей
      parameters:
        - in: query
          name: ordering
          schema:
            type: string
          description: Order by id, created_at, key, ip_address, user_agent, user_id
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
        - in: query
          name: created_at__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less created_at
        - in: query
          name: created_at__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great created_at
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - reset password

  /coordinators/signup/:
    post:
      summary: Registration a coordinator
      operationId: RegistrationCoordinator
      description: |
        # Регистрация Координатора (is_check=False)
        ## При успешной регистрации Администратору в ЛК и на почту должно отправляться уведомление
        ## Авторизация возможна только после валидации Администратором (is_check=True)
        ## В request body перечислены все возможные поля (ненужные удалить)
        ### Обязательные поля: "phone", "password", "name", "surname", "email" 
        ### Уникальные поля: "phone"
        ### Проверка на валидацию: "phone", "email"
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCoordinatorAndRecipient'
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - registration

  /recipients/signup/:
    post:
      operationId: RegistrationRecipient
      summary: Registration a recipient
      description: |
        # Регистрация получателя  (is_check=False)
        ## При успешной регистрации координаторам в ЛК и на почту должно отправляться уведомление
        ## Авторизация возможна только после валидации координатором (is_check=True)
        ## В request body перечислены все возможные поля (ненужные удалить)
        ### Обязательные поля: "phone", "password", "name", "surname"
        ### Уникальные поля: "phone"
        ### Проверка на валидацию: "phone", "email"
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationCoordinatorAndRecipient'
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - registration

  /operators/signup/:
    post:
      operationId: RegistrationOperator
      summary: Registration a operator
      description: |
        # Регистрация оператора (is_check=False)
        ## При успешной регистрации администратору в ЛК и на почту должно отправляться уведомление
        ## Авторизация возможна только после валидации администратором (is_check=True)
        ## В request body перечислены все возможные поля (ненужные удалить)
        ### Обязательные поля: "phone", "password", "name", "surname", "email", "department_id_id" 
        ### Уникальные поля: "phone"
        ### Проверка на валидацию: "phone", "email"
        # TODO: В поле "department_id_id" сейчас вводится id ведомства. Надо будет сделать выпадающий список ведомств из БД
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationOperator'
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - registration

  /whoami/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a user by token
      operationId: WhoAmI
      description: |
        ## Получение информации пользователя по токену (активные пользователи (is_active=True))
      parameters: [ ]
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - whoami

  /upload-photo/:
    post:
      security:
        - bearerAuth: [ ]
      operationId: UploadPhoto
      summary: Add a photo to storage
      description: |
        # Добавление фотографий в локальное хранилище
      parameters: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                  my-attachment:
                      type: array
                      items:
                          format: binary
                          type: string
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - photo

  /photo/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a photo by id
      operationId: GetPhoto
      description: |
        # Получение фотографии:
        ## Любой активный и валидный пользователь
        ### В запросе передается значение поля "photo" строки в сущности
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: http://116.202.240.109:8080/media/7c0ccda4-9b1f-480d-b025-143766289624.jpg
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
#                format: binary
          description: OK
      tags:
        - photo

  /users/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a user's list by token
      operationId: Users
      description: |
        # Список пользователей в зависимости от роли пользователя (определяется по токену):
        ## Администратор - абсолютно все пользователи
        ## Координаторы (валидные и активные) - активные и валидные координаторы и операторы, все получатели
        ## Операторы (валидные и активные) - активные и валидные координаторы, операторы и получатели
        ## Получатели (валидные и активные) - активные и валидные координаторы
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search by surname
        - in: query
          name: ordering
          schema:
            type: string
          description: Order by id, name, surname, middle_name, staff, email, phone, date_joined, is_check, is_active, groups, department_id, last_login
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
        - in: query
          name: is_active
          schema:
            type: boolean
          description: filter by is_active
        - in: query
          name: is_check
          schema:
            type: boolean
          description: filter by is_check
        - in: query
          name: date_joined__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less date_joined
        - in: query
          name: date_joined__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great date_joined
        - in: query
          name: last_login__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less last_login
        - in: query
          name: last_login__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great last_login
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users
    post:
      security:
        - bearerAuth: [ ]
      operationId: CreateUser
      summary: Create a user
      description: |
        # Создание пользователя
        ## Администратор - создание пользователей с любой ролью
        ## Оператор - создание получателей (staff = 'RE', is_check = False)
        ## Координатор - создание получателей (staff = 'RE', is_check = True)
        ## В request body перечислены все возможные поля (ненужные удалить)
        ### Обязательные поля: "phone", "password", "name", "surname", "staff", "is_superuser", "is_check", "is_active" 
        ### Уникальные поля: "phone"
        ### Проверка на валидацию: "phone", "email"
        ### При создании пользователя с ролью "OP" поля "email" и "department_id" обязательны
        ### При создании пользователя с ролью "CO" поле "email" обязательно
        # TODO: Выбор роли пользователя из списка
        # TODO: Выбор "department_id" из списка
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users

  /users/coordinators/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a coordinator's list by token
      operationId: Coordinators
      description: |
        # Список координаторов в зависимости от роли пользователя (определяется по токену):
        ## Администратор - абсолютно все координаторы
        ## Координаторы (валидные и активные) - активные и валидные координаторы
        ## Операторы (валидные и активные) - активные и валидные координаторы
        ## Получатели (валидные и активные) - активные и валидные координаторы
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search by surname
        - in: query
          name: ordering
          schema:
            type: string
          description: Order by id, name, surname, middle_name, staff, email, phone, date_joined, is_check, is_active, groups, department_id, last_login
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
        - in: query
          name: is_active
          schema:
            type: boolean
          description: filter by is_active
        - in: query
          name: is_check
          schema:
            type: boolean
          description: filter by is_check
        - in: query
          name: date_joined__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less date_joined
        - in: query
          name: date_joined__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great date_joined
        - in: query
          name: last_login__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less last_login
        - in: query
          name: last_login__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great last_login
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users

  /users/operators/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a operator's list by token
      operationId: Operators
      description: |
        # Список операторов в зависимости от роли пользователя (определяется по токену):
        ## Администратор - абсолютно все операторы
        ## Координаторы (валидные и активные) - активные и валидные операторы
        ## Операторы (валидные и активные) - активные и валидные операторы
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search by surname
        - in: query
          name: ordering
          schema:
            type: string
          description: Order by id, name, surname, middle_name, staff, email, phone, date_joined, is_check, is_active, groups, department_id, last_login
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
        - in: query
          name: is_active
          schema:
            type: boolean
          description: filter by is_active
        - in: query
          name: is_check
          schema:
            type: boolean
          description: filter by is_check
        - in: query
          name: date_joined__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less date_joined
        - in: query
          name: date_joined__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great date_joined
        - in: query
          name: last_login__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less last_login
        - in: query
          name: last_login__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great last_login
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users

  /users/recipients/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a recipient's list by token
      operationId: Recipients
      description: |
        # Список получателей в зависимости от роли пользователя (определяется по токену):
        ## Администратор - абсолютно все получатели
        ## Координаторы (валидные и активные) - абсолютно все получатели
        ## Операторы (валидные и активные) - активные и валидные получатели
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search by surname
        - in: query
          name: ordering
          schema:
            type: string
          description: Order by id, name, surname, middle_name, staff, email, phone, date_joined, is_check, is_active, groups, department_id, last_login
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
        - in: query
          name: is_active
          schema:
            type: boolean
          description: filter by is_active
        - in: query
          name: is_check
          schema:
            type: boolean
          description: filter by is_check
        - in: query
          name: date_joined__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less date_joined
        - in: query
          name: date_joined__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great date_joined
        - in: query
          name: last_login__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less last_login
        - in: query
          name: last_login__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great last_login
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users

  /users/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a user by id
      operationId: GetUser
      description: |
        # Получение профиля пользователя:
        ## Администратор - любой пользователь
        ## Координаторы (валидные и активные) - активный и валидный координатор или оператор, любой получатель
        ## Операторы (валидные и активные) - активный и валидный координатор или оператор, или получатель
        ## Получатели (валидные и активные) - активный и валидный координатор, собственный профиль
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users
    patch:
      security:
        - bearerAuth: [ ]
      summary: Update a user by id
      operationId: UpdateUser
      description: |
        # Редактирование профиля пользователя:
        ## Администратор - любой пользователь
        ## Координаторы (валидные и активные) - редактирование собственного профиля, кроме staff, is_active и is_check (только администраторы), редактирование полей is_check и is_active любого получателя
        ## Операторы (валидные и активные) - редактирование собственного профиля, кроме staff, is_active и is_check (только администраторы)
        ## Получатели (валидные и активные) - редактирование собственного профиля, кроме staff и is_active (только администраторы) и is_check (только администраторы и координаторы)
        ## В request body перечислены все поля (ненужные удалить)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
            required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users
    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a user by id
      operationId: DeleteUser
      description: |
        # Удаление пользователя:
        ## Администратор - удаление любого пользователя из БД
        ## Остальные валидные и активные пользователи - удаление собственного доступа к сервису (is_active=False)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users

  /users/{id}/groups/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get recipient's groups by token
      operationId: UsersGroups
      description: |
        # Список Групп получателя:
        ## Администратор - все группы получателя
        ## Координаторы (валидные и активные) - все группы получателя
        ## Операторы (валидные и активные) - все активные группы активного и валидного получателя
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users
    post:
      security:
        - bearerAuth: [ ]
      operationId: AddUserGroup
      summary: Add a recipient to group
      description: |
        # Добавление получателя в группу
        ## Администратор - добавление любого получателя в любую группу
        ## Координаторы (валидные и активные) - добавление любого получателя в любую группу
        ### В группу добавить можно только пользователя с ролью Получатель!
        ### Добавляется запись в таблицу UserGroup - id пользователя берется из Uri, id группы из request body
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 2
            required: true
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users
    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a recipient from UserGroup
      operationId: DeleteRecipientUserGroup
      description: |
        # Удаление получателя из группы
        ## Администратор - удаление любого получателя из любой группы
        ## Координаторы (валидные и активные) - удаление любого получателя из любой группы
        ### Удаляется запись из таблицы UserGroup - id пользователя берется из Uri, id группы из request body
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 2
            required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users

  /users/{id}/events/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get user's events by token
      operationId: UserEvents
      description: |
        # Список всех событий получателя:
        ## Администратор - все события получателя
        ## Координаторы (валидные и активные) - все события получателя
        ## Операторы (валидные и активные) - все события получателя
        ## Получатели (валидные и активные) - только собственные валидные (is_check=True) события
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - users

  /departments/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a department's list by token
      operationId: Departments
      description: |
        # Список всех ведомств
        ## Любой пользователь
      parameters: [ ]
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments
    post:
      security:
        - bearerAuth: [ ]
      operationId: CreateDepartment
      summary: Create a department by administrator
      description: |
        # Создание ведомства
        ## Администратор
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Министерство здравоохранения
            required: true
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments

  /departments/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a department by id
      operationId: GetDepartment
      description: |
        # Получение ведомства
        ## Администратор
        ## Валидные и активные пользователи
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments
    patch:
      security:
        - bearerAuth: [ ]
      summary: Update a department by id
      operationId: UpdateDepartment
      description: |
        # Редактирование ведомства
        ## Администратор
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Министерство здравоохранения
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments
    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a department by id
      operationId: DeleteUser
      description: |
        # Удаление ведомства из БД
        ## Администратор
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments

  /departments/{id}/locations/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get department's locations by token
      operationId: DepartmentLocations
      description: |
        # Список учреждений ведомства
        ## Администраторы - все учреждения ведомства
        ## Координаторы (валидные и активные) - активные учреждения ведомства
        ## Операторы (валидные и активные) - все учреждения ведомства (если оператор связан с ведомством) или активные учреждения ведомства (если оператор не связан с ведомством)
        ## Получатели (валидные и активные) - активные учреждения ведомства
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - departments

  /locations/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a location's list by token
      operationId: Locations
      description: |
        # Список всех учреждений
        ## Администратор - все учреждения
        ## Операторы (валидные и активные) - все учреждения, кроме неактивных учреждений других ведомств (с которыми оператор не связан)
        ## Координаторы (валидные и активные) - активные учреждения
        ## Получатели (валидные и активные) - активные учреждения
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search by name
        - in: query
          name: ordering
          schema:
            type: string
          description: Order by id, name, address, email, phone, is_active, department_id
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
        - in: query
          name: is_active
          schema:
            type: boolean
          description: filter by is_active
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations
    post:
      security:
        - bearerAuth: [ ]
      operationId: CreateLocation
      summary: Create a location
      description: |
        # Создание учреждения
        ## Администратор - создание любого учреждения
        ## Операторы (валидные и активные) - создание учреждения собственного ведомства
        ## В request body перечислены все поля (ненужные удалить)
        ### Обязательные поля: "name", "address", "phone", "department_id" (это поле только для Админа, для Оператора оно будет игнорироваться)
        ### Уникальные поля: "name", "phone"
        ### Проверка на валидацию: "phone"
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocation'
            required: true
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations

  /locations/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a location by id
      operationId: GetLocation
      description: |
        # Получение учреждения
        ## Администратор - любое учреждение
        ## Операторы (валидные и активные) - любое учреждение, кроме неактивных учреждений других ведомств (с которыми оператор не связан)
        ## Координаторы (валидные и активные) - активное учреждение
        ## Получатели (валидные и активные) - активное учреждение
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations
    patch:
      security:
        - bearerAuth: [ ]
      summary: Update a location by id
      operationId: UpdateLocation
      description: |
        # Редактирование учреждения
        ## Администратор - редактирование любого учреждения
        ## Операторы (валидные и активные) - редактирование учреждения собственного ведомства, кроме поля department_id (только администратор)
        ## В request body перечислены все поля (ненужные удалить)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLocation'
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations
    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a location by id
      operationId: DeleteLocation
      description: |
        # Удаление учреждения:
        ## Администратор - удаление любого учреждения из БД
        ## Операторы (валидные и активные) - делают учреждение собственного ведомства неактивным (is_active=False)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - locations

  /groups/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a group's list by token
      operationId: Groups
      description: |
        # Список групп
        ## Администратор - все группы
        ## Координаторы (валидные и активные) - все группы
        ## Операторы (валидные и активные) - активные группы
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search by name
        - in: query
          name: ordering
          schema:
            type: string
          description: Order by id, name, is_active
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
        - in: query
          name: is_active
          schema:
            type: boolean
          description: filter by is_active
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - groups
    post:
      security:
        - bearerAuth: [ ]
      operationId: CreateGroup
      summary: Create a group
      description: |
        # Создание группы
        ## Администратор
        ## Координаторы (валидные и активные)
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Тестовая группа
            required: true
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - groups

  /groups/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a group by id
      operationId: GetGroup
      description: |
        # Получение группы
        ## Администратор - любая группа
        ## Координаторы (валидные и активные) - любая группа
        ## Операторы (валидные и активные) - активная группа
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - groups
    patch:
      security:
        - bearerAuth: [ ]
      summary: Update a group by id
      operationId: UpdateGroup
      description: |
        # Редактирование группы
        ## Администратор
        ## Координаторы (валидные и активные)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Группа
                is_active:
                  type: boolean
                  example: false
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - groups
    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a group by id
      operationId: DeleteGroup
      description: |
        # Удаление группы
        ## Администратор - удаление группы из БД
        ## Координаторы (валидные и активные) - делают группу неактивной (is_active=False)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - groups

  /groups/{id}/users/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get group's recipients by token
      operationId: GroupUsers
      description: |
        # Получение списка получателей в группе
        ## Администратор - все получатели в группе
        ## Координаторы (валидные и активные) - все получатели в группе
        ## Операторы (валидные и активные) - все активные и валидные получатели в активной группе
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - groups
    post:
      security:
        - bearerAuth: [ ]
      operationId: AddUserGroup
      summary: Add a recipient to group
      description: |
        # Добавление Получателя в группу
        ## Администратор - добавление любого получателя в любую группу
        ## Координаторы (валидные и активные) - добавление любого получателя в группу
        ### В группу добавить можно только пользователя с ролью Получатель!
        ### Добавляется запись в таблицу UserGroup - id группы берется из Uri, id пользователя из request body
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 2
            required: true
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - groups
    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a recipient from UserGroup
      operationId: DeleteRecipientUserGroup
      description: |
        # Удаление получателя из группы
        ## Администратор - удаление любого получателя из любой группы
        ## Координаторы (валидные и активные) - удаление любого получателя из любой группы
        ### Удаляется запись из таблицы UserGroup - id группы берется из Uri, id пользователя из request body
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 2
            required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - groups

  /groups/{id}/users/many/:
    post:
      security:
        - bearerAuth: [ ]
      operationId: AddUsersGroup
      summary: Add recipient's list to group
      description: |
        # Добавление Получателей в группу
        ## Администратор - добавление списка получателей в любую группу
        ## Координаторы (валидные и активные) - добавление списка получателей в любую группу
        ### В группу добавить можно только пользователей с ролью Получатель!
        ### Добавляются записи в таблицу UserGroup - id группы берется из Uri, id пользователей из request body
        ### Добавление в БД начинается с начала списка id получателей:
        - Если в списке есть невалидный id - вызывается исключение, все предыдущие значения будут записаны в БД
        - Если в БД есть запись с id из списка - этот id пропускается (для избежания дублирования) и продолжается прохождение цикла
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  items:
                    type: integer
                  example:
                    - 2
                    - 3
            required: true
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - groups

  /events/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a events list by token
      operationId: Events
      description: |
        # Получение списка событий
        ## Администратор - все события
        ## Операторы (валидные и активные) - все события
        ## Координаторы (валидные и активные) - все события
        ## Получатели (валидные и активные) - свои валидные (is_check=True) события
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search by name
        - in: query
          name: ordering
          schema:
            type: string
          description: Order by id, name, description, is_check, is_finished, datetime, start, end, location_id, recipient_id, group_id
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: page
          schema:
            type: integer
          description: The page of items
        - in: query
          name: is_finished
          schema:
            type: boolean
          description: filter by is_finished
        - in: query
          name: is_check
          schema:
            type: boolean
          description: filter by is_check
        - in: query
          name: datetime__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less datetime
        - in: query
          name: datetime__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great datetime
        - in: query
          name: start__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less start
        - in: query
          name: start__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great start
        - in: query
          name: end__lte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by less end
        - in: query
          name: end__gte
          schema:
            type: string
            format: date
            example: "2023-10-11"
          description: filter by great end
        - in: query
          name: location_id_id
          schema:
            type: integer
            example: 1
          description: filter by location_id_id
        - in: query
          name: recipient_id_id
          schema:
            type: integer
            example: 1
          description: filter by recipient_id_id
        - in: query
          name: group_id_id
          schema:
            type: integer
            example: 1
          description: filter by group_id_id
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - events
    post:
      security:
        - bearerAuth: [ ]
      operationId: CreateEvent
      summary: Create a event
      description: |
        # Создание события 
        ## Администратор - создание любого события
        ## Операторы (валидные и активные) - создание события с учреждением собственного ведомства
        ## В request body перечислены все поля (ненужные удалить)
        ### Обязательные поля: "name", "location_id"
        ### События ТОЛЬКО для получателей
        ### Для операторов валидация полей "location_id" (учреждение должно быть активно и своего ведомства), "recipient_id" и "group_id" (получатель или группа должны быть активны и валидны)
        ### Одно из полей "datetime", "start", "end" должно быть заполнено
        ### ТОЛЬКО одно из полей "recipient_id", "group_id" должно быть заполнено
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEvent'
            required: true
      responses:
        '201':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - events

  /events/{id}/:
    get:
      security:
        - bearerAuth: [ ]
      summary: Get a event by id
      operationId: GetEvent
      description: |
        # Получение события
        ## Администратор - любое событие
        ## Операторы (валидные и активные) - любое событие
        ## Координаторы (валидные и активные) - любое событие
        ## Получатели (валидные и активные) - свое валидное (is_check=True) событие
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - events
    patch:
      security:
        - bearerAuth: [ ]
      summary: Update a event by id
      operationId: UpdateEvent
      description: |
        # Редактирование события
        ## Администратор - редактирование любого события
        ## Операторы (валидные и активные) - редактирование события с учреждением собственного ведомства, кроме поля is_check
        ## Координаторы (валидные и активные) - изменение поля is_check любого события (остальные поля в request игнорируются)
        ## В request body перечислены все поля (ненужные удалить)
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEvent'
      responses:
        '200':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - events
    delete:
      security:
        - bearerAuth: [ ]
      summary: Delete a event by id
      operationId: DeleteLocation
      description: |
        # Удаление события
        ## Администратор - удаление любого события из БД
        ## Операторы (валидные и активные) - удаление события с учреждением собственного ведомства
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '204':
          content:
            application/json:
              schema: { }
          description: OK
      tags:
        - events

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Login:
      type: object
      properties:
        user:
          type: object
          properties:
            phone:
              type: string
              example: "+79998887766"
            password:
              type: string
              example: Maksoft2023

    RegistrationCoordinatorAndRecipient:
      type: object
      properties:
        phone:
          type: string
          example: "+79998887766"
        password:
          type: string
          example: Maksoft2023
        name:
          type: string
          example: testname
        surname:
          type: string
          example: testsurname
        middle_name:
          type: string
          example: testmiddlename
        photo:
          type: string
          example: http://116.202.240.109:8080/media/7c0ccda4-9b1f-480d-b025-143766289624.jpg
        email:
          type: string
          example: test@test.test

    RegistrationOperator:
      type: object
      properties:
        phone:
          type: string
          example: "+79998887766"
        password:
          type: string
          example: Maksoft2023
        name:
          type: string
          example: testname
        surname:
          type: string
          example: testsurname
        middle_name:
          type: string
          example: testmiddlename
        email:
          type: string
          example: test@test.test
        photo:
          type: string
          example: http://116.202.240.109:8080/media/7c0ccda4-9b1f-480d-b025-143766289624.jpg
        department_id_id:
          type: integer
          example: 2

    CreateUser:
      type: object
      properties:
        phone:
          type: string
          example: "+79998887766"
        password:
          type: string
          example: Maksoft2023
        name:
          type: string
          example: testname
        surname:
          type: string
          example: testsurname
        middle_name:
          type: string
          example: testmiddlename
        staff:
          type: string
          example: OP
        email:
          type: string
          example: test@test.test
        photo:
          type: string
          example: http://116.202.240.109:8080/media/7c0ccda4-9b1f-480d-b025-143766289624.jpg
        department_id_id:
          type: integer
          example: 1
        is_superuser:
          type: boolean
          example: False
        is_active:
          type: boolean
          example: True
        is_check:
          type: boolean
          example: True

    CreateLocation:
      type: object
      properties:
        name:
          type: string
          example: test1
        address:
          type: string
          example: Penza
#        lat:
#          type: number
#          example: 53.178386
#        lon:
#          type: number
#          example: 45.008664
        photo:
          type: string
          example: http://116.202.240.109:8080/media/7c0ccda4-9b1f-480d-b025-143766289624.jpg
        phone:
          type: string
          example: "+79998887766"
        email:
          type: string
          example: test@test.test
        department_id_id:
          type: integer
          example: 1
        is_active:
          type: boolean

    CreateEvent:
      type: object
      properties:
        name:
          type: string
          example: Event1
        description:
          type: string
          example: Description1
        datetime:
          type: string
          format: date-time
          example: "2023-10-11T15:00:00+03:00"
        start:
          type: string
          format: date-time
          example: "2023-10-11T15:00:00+03:00"
        end:
          type: string
          format: date-time
          example: "2023-10-11T15:00:00+03:00"
        photo:
          type: string
          example: [http://116.202.240.109:8080/media/7c0ccda4-9b1f-480d-b025-143766289624.jpg, http://116.202.240.109:8080/media/0f5fc3c0-5dde-4c0d-b86e-c9fb1f9040fc.jpg]
        is_check:
          type: boolean
          example: True
        is_finished:
          type: boolean
          example: False
        location_id_id:
          type: integer
          example: 2
        recipient_id_id:
          type: integer
          example: 10
        group_id_id:
          type: integer


